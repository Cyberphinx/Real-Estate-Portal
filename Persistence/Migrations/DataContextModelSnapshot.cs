// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "property_type", new[] { "not_specified", "terraced_house", "end_of_terrace_house", "semi_detached_house", "detached_house", "mews", "cluster_house", "ground_flat", "flat", "studio", "ground_maisonette", "maisonette", "bungalow", "terraced_bungalow", "end_of_terrace_bungalow", "semi_detached_bungalow", "detached_bungalow", "mobile_home", "commercial_property", "land", "link_detached_house", "town_house", "cottage", "chalet", "character_property", "house", "villa", "apartment", "penthouse", "finca", "barn_conversion", "serviced_apartments", "parking", "sheltered_housing", "retirement_property", "house_share", "flat_share", "park_home", "garages", "farm_house", "equestrian_facility", "duplex", "triplex", "longere", "gite", "barn", "unconverted_barn", "trulli", "mill", "commercial_mill", "ruins", "restaurant", "cafe", "castle", "village_house", "cave_house", "cortijo", "farm_land", "plot", "country_house", "stone_house", "caravan", "lodge", "log_cabin", "manor_house", "stately_home", "off_plan", "semi_detached_villa", "detached_villa", "bar_night_club", "shop", "riad", "house_boat", "hotel_room", "block_of_apartments", "private_halls", "office", "business_park", "serviced_office", "retail_property_high_street", "retail_property_out_of_town", "convenience_store", "garage", "hairdresser_barber_shop", "petrol_station", "post_office", "pub", "workshop_and_retail_space", "distribution_warehouse", "factory", "heavy_industrial", "industrial_park", "light_industrial", "storage", "showroom", "warehouse", "commercial_land", "commercial_development", "industrial_development", "residential_development", "data_centre", "farm", "healthcare_facility", "marine_property", "mixed_use", "research_and_development_facility", "science_park", "guest_house", "hospitality", "leisure_facility", "takeaway", "childcare_facility", "smallholding", "place_of_worship", "trade_counter", "coach_house" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.AppUserAggregate.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.AppUserInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsQuotation")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("text");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("VatPercentage")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserInvoices");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.AppUserInvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<Guid>("AppUserInvoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("VatPercentage")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppUserInvoiceId");

                    b.ToTable("AppUserInvoiceItem");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.AppUserMedia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("CopyFromUrl")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLogo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppUserMedia");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.AppUserReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewerDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ReviewerEmail")
                        .HasColumnType("text");

                    b.Property<string>("ReviewerPhone")
                        .HasColumnType("text");

                    b.Property<string>("ReviewerUsername")
                        .HasColumnType("text");

                    b.Property<List<string>>("ServiceCategories")
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppUserReview");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("MemberSince")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Membership");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Domain.CalendarAggregate.CalendarEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventDescription")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CompanyReference")
                        .HasColumnType("text");

                    b.Property<string>("CompanyRegistrationNumber")
                        .HasColumnType("text");

                    b.Property<string>("CompanyType")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("IcoRegistrationNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LegalName")
                        .HasColumnType("text");

                    b.Property<string>("RedressScheme")
                        .HasColumnType("text");

                    b.Property<List<string>>("ServiceCategories")
                        .HasColumnType("text[]");

                    b.Property<string>("ServiceLocations")
                        .HasColumnType("text");

                    b.Property<string>("SummaryDescription")
                        .HasColumnType("text");

                    b.Property<string>("TermsAndConditions")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("VatNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<string>("DisplayAddress")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Locality")
                        .HasColumnType("text");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("PropertyNumberOrName")
                        .HasColumnType("text");

                    b.Property<string>("StreetName")
                        .HasColumnType("text");

                    b.Property<string>("TownOrCity")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyAddress");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyContacts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyContacts");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Heading")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyDescription");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyMedia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("CopyFromUrl")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLogo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyMedia");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewerDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ReviewerEmail")
                        .HasColumnType("text");

                    b.Property<string>("ReviewerPhone")
                        .HasColumnType("text");

                    b.Property<string>("ReviewerUsername")
                        .HasColumnType("text");

                    b.Property<List<string>>("ServiceCategories")
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyReview");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.Insurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IndemnityLimit")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("InsurancePolicy")
                        .HasColumnType("text");

                    b.Property<string>("InsuranceScheme")
                        .HasColumnType("text");

                    b.Property<string>("InsuranceType")
                        .HasColumnType("text");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Insurance");
                });

            modelBuilder.Entity("Domain.Injection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Agency")
                        .HasColumnType("text");

                    b.Property<string>("SpiderTag")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Injections");
                });

            modelBuilder.Entity("Domain.JobAggregate.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("integer");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("integer");

                    b.Property<bool>("Commercial")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text");

                    b.Property<string>("CustomerImage")
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("text");

                    b.Property<string>("DeclaredlValue")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("FinishBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("JobLifeCycle")
                        .HasColumnType("integer");

                    b.Property<string>("JobReference")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("PackingRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("PropertyType")
                        .HasColumnType("text");

                    b.Property<List<string>>("ServiceCategories")
                        .HasColumnType("text[]");

                    b.Property<bool>("StorageRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("StorageValue")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsQuotation")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("text");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("SellerUsername")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("VatPercentage")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobInvoices");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobInvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid>("JobInvoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("VatPercentage")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JobInvoiceId");

                    b.ToTable("JobInvoiceItem");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressType")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<string>("DisplayAddress")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Locality")
                        .HasColumnType("text");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("PropertyNumberOrName")
                        .HasColumnType("text");

                    b.Property<string>("StreetName")
                        .HasColumnType("text");

                    b.Property<string>("TownOrCity")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobLocation");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobMedia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("CopyFromUrl")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLogo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobMedia");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("JobId");

                    b.ToTable("JobMessages");
                });

            modelBuilder.Entity("Domain.JobNetwork", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("AppUserId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("JobNetworks");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("Accessibility")
                        .HasColumnType("boolean");

                    b.Property<double>("Acreage")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AdministrationFees")
                        .HasColumnType("text");

                    b.Property<string>("Agency")
                        .HasColumnType("text");

                    b.Property<double>("AnnualBusinessRates")
                        .HasColumnType("double precision");

                    b.Property<double>("AreaTotal")
                        .HasColumnType("double precision");

                    b.Property<int>("AreaUnits")
                        .HasColumnType("integer");

                    b.Property<int>("AvailableBedrooms")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AvailableFromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("integer");

                    b.Property<List<string>>("BillsIncluded")
                        .HasColumnType("text[]");

                    b.Property<bool>("BusinessForSale")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("BuyerIncentives")
                        .HasColumnType("text[]");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("CentralHeating")
                        .HasColumnType("integer");

                    b.Property<bool>("ChainFree")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("CommercialUseClass")
                        .HasColumnType("text[]");

                    b.Property<string>("CommonholdDetails")
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("ConnectedUtilities")
                        .HasColumnType("text[]");

                    b.Property<int>("ConstructionYear")
                        .HasColumnType("integer");

                    b.Property<int>("CookerType")
                        .HasColumnType("integer");

                    b.Property<int>("CouncilTaxBand")
                        .HasColumnType("integer");

                    b.Property<int>("DecorativeCondition")
                        .HasColumnType("integer");

                    b.Property<double>("Deposit")
                        .HasColumnType("double precision");

                    b.Property<string>("EerCurrentRating")
                        .HasColumnType("text");

                    b.Property<string>("EerPotentialRating")
                        .HasColumnType("text");

                    b.Property<string>("EirCurrentRating")
                        .HasColumnType("text");

                    b.Property<string>("EirPotentialRating")
                        .HasColumnType("text");

                    b.Property<List<string>>("FeatureList")
                        .HasColumnType("text[]");

                    b.Property<bool>("FeatureProperty")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("FloorLevels")
                        .HasColumnType("text[]");

                    b.Property<int>("Floors")
                        .HasColumnType("integer");

                    b.Property<int>("FurnishedState")
                        .HasColumnType("integer");

                    b.Property<double>("GroundRent")
                        .HasColumnType("double precision");

                    b.Property<string>("GroundRentReviewPeriod")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LeaseExpiry")
                        .HasColumnType("text");

                    b.Property<int>("LifeCycleStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("ListedBuilding")
                        .HasColumnType("boolean");

                    b.Property<int>("ListedBuildingGrade")
                        .HasColumnType("integer");

                    b.Property<string>("ListingReference")
                        .HasColumnType("text");

                    b.Property<int>("LivingRooms")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumContractLength")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumContractLengthUnits")
                        .HasColumnType("integer");

                    b.Property<bool>("NewBuild")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OpenDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Parking")
                        .HasColumnType("boolean");

                    b.Property<bool>("PetsAllowed")
                        .HasColumnType("boolean");

                    b.Property<int>("PropertyType")
                        .HasColumnType("integer");

                    b.Property<int>("RateableValue")
                        .HasColumnType("integer");

                    b.Property<int>("RatesPayable")
                        .HasColumnType("integer");

                    b.Property<int>("RentalTerm")
                        .HasColumnType("integer");

                    b.Property<bool>("Repossession")
                        .HasColumnType("boolean");

                    b.Property<bool>("Retirement")
                        .HasColumnType("boolean");

                    b.Property<string>("SapRating")
                        .HasColumnType("text");

                    b.Property<bool>("Serviced")
                        .HasColumnType("boolean");

                    b.Property<bool>("SharedAccommodation")
                        .HasColumnType("boolean");

                    b.Property<string>("SharedOwnershipDetails")
                        .HasColumnType("text");

                    b.Property<bool>("SmokersConsidered")
                        .HasColumnType("boolean");

                    b.Property<string>("SourceUri")
                        .HasColumnType("text");

                    b.Property<string>("SpiderTag")
                        .HasColumnType("text");

                    b.Property<string>("SummaryDescription")
                        .HasColumnType("text");

                    b.Property<int>("TenantEligibilityDss")
                        .HasColumnType("integer");

                    b.Property<int>("TenantEligibilityStudents")
                        .HasColumnType("integer");

                    b.Property<bool>("Tenanted")
                        .HasColumnType("boolean");

                    b.Property<int>("Tenure")
                        .HasColumnType("integer");

                    b.Property<int>("TotalBedrooms")
                        .HasColumnType("integer");

                    b.Property<List<string>>("WhiteGoods")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.ChangeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("ChangeLog");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.DetailedDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Heading")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<double>("Length")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int>("Unit")
                        .HasColumnType("integer");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("DetailedDescription");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.KeyContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Agency")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("KeyContact");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.ListingLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<string>("DisplayAddress")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Locality")
                        .HasColumnType("text");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("PropertyNumberOrName")
                        .HasColumnType("text");

                    b.Property<string>("StreetName")
                        .HasColumnType("text");

                    b.Property<string>("TownOrCity")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListingId")
                        .IsUnique();

                    b.ToTable("ListingLocation");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.ListingMedia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("CopyFromUrl")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLogo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("ListingMedia");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.Pricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AreaUnits")
                        .HasColumnType("integer");

                    b.Property<bool>("Auction")
                        .HasColumnType("boolean");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<double>("PricePerUnitArea")
                        .HasColumnType("double precision");

                    b.Property<string>("PriceQualifier")
                        .HasColumnType("text");

                    b.Property<int>("RentFrequency")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ListingId")
                        .IsUnique();

                    b.ToTable("Pricing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.ServiceCharge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Applicable")
                        .HasColumnType("boolean");

                    b.Property<double>("Charge")
                        .HasColumnType("double precision");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<int>("PerUnitAreaUnits")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewPeriod")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListingId")
                        .IsUnique();

                    b.ToTable("ServiceCharge");
                });

            modelBuilder.Entity("Domain.ListingWatcher", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AppUserId", "ListingId");

                    b.HasIndex("ListingId");

                    b.ToTable("ListingWatchers");
                });

            modelBuilder.Entity("Domain.TrackingAggregate.Tracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("App")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("Component")
                        .HasColumnType("text");

                    b.Property<string>("Count")
                        .HasColumnType("text");

                    b.Property<string>("Event")
                        .HasColumnType("text");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("ListingId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TrackingData");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Agency",
                            NormalizedName = "AGENCY"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "6",
                            Name = "Removalist",
                            NormalizedName = "REMOVALIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.AppUserInvoice", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithMany("Invoices")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.AppUserInvoiceItem", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.Objects.AppUserInvoice", "AppUserInvoice")
                        .WithMany("Items")
                        .HasForeignKey("AppUserInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUserInvoice");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.AppUserMedia", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithMany("Photos")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.AppUserReview", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithMany("Reviews")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.Membership", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithOne("Membership")
                        .HasForeignKey("Domain.AppUserAggregate.Objects.Membership", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.RefreshToken", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyAddress", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithOne("CompanyAddress")
                        .HasForeignKey("Domain.CompanyAggregate.Objects.CompanyAddress", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyContacts", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithOne("CompanyContacts")
                        .HasForeignKey("Domain.CompanyAggregate.Objects.CompanyContacts", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyDescription", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("CompanyDescriptions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyMedia", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("CompanyMedia")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyReview", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("Reviews")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.Insurance", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("Insurances")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobInvoice", b =>
                {
                    b.HasOne("Domain.JobAggregate.Job", "Job")
                        .WithMany("Invoices")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobInvoiceItem", b =>
                {
                    b.HasOne("Domain.JobAggregate.Objects.JobInvoice", "JobInvoice")
                        .WithMany("Items")
                        .HasForeignKey("JobInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobInvoice");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobLocation", b =>
                {
                    b.HasOne("Domain.JobAggregate.Job", "Job")
                        .WithMany("JobLocations")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobMedia", b =>
                {
                    b.HasOne("Domain.JobAggregate.Job", "Job")
                        .WithMany("JobMedia")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobMessage", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.JobAggregate.Job", "Job")
                        .WithMany("Messages")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Author");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.JobNetwork", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithMany("Jobs")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.JobAggregate.Job", "Job")
                        .WithMany("Networks")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Listing", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("Listings")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.ChangeLog", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithMany("ChangeLogs")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.DetailedDescription", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithMany("DetailedDescriptions")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.KeyContact", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithMany("KeyContacts")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.ListingLocation", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithOne("ListingLocation")
                        .HasForeignKey("Domain.ListingAggregate.Objects.ListingLocation", "ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.ListingMedia", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithMany("ListingMedia")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.Pricing", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithOne("Pricing")
                        .HasForeignKey("Domain.ListingAggregate.Objects.Pricing", "ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.ServiceCharge", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithOne("ServiceCharge")
                        .HasForeignKey("Domain.ListingAggregate.Objects.ServiceCharge", "ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingWatcher", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithMany("SavedListings")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithMany("Watchers")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AppUserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AppUserAggregate.AppUser", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Jobs");

                    b.Navigation("Membership");

                    b.Navigation("Photos");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Reviews");

                    b.Navigation("SavedListings");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.AppUserInvoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Company", b =>
                {
                    b.Navigation("CompanyAddress");

                    b.Navigation("CompanyContacts");

                    b.Navigation("CompanyDescriptions");

                    b.Navigation("CompanyMedia");

                    b.Navigation("Insurances");

                    b.Navigation("Listings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.JobAggregate.Job", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("JobLocations");

                    b.Navigation("JobMedia");

                    b.Navigation("Messages");

                    b.Navigation("Networks");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobInvoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Listing", b =>
                {
                    b.Navigation("ChangeLogs");

                    b.Navigation("DetailedDescriptions");

                    b.Navigation("KeyContacts");

                    b.Navigation("ListingLocation");

                    b.Navigation("ListingMedia");

                    b.Navigation("Pricing");

                    b.Navigation("ServiceCharge");

                    b.Navigation("Watchers");
                });
#pragma warning restore 612, 618
        }
    }
}
