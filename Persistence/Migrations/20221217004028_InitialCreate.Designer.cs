// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221217004028_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "property_type", new[] { "barn_conversion", "block_of_flats", "bungalow", "business_park", "chalet", "chateau", "cottage", "country_house", "detached", "detached_bungalow", "end_terrace", "equestrian", "farm", "farmhouse", "finca", "flat", "hotel", "houseboat", "industrial", "land", "leisure", "light_industrial", "link_detached", "lodge", "longere", "maisonette", "mews", "office", "park_home", "parking", "pub_bar", "restaurant", "retail", "riad", "semi_detached", "semi_detached_bungalow", "studio", "terraced", "terraced_bungalow", "town_house", "villa", "warehouse" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.AppUserAggregate.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer")
                        .HasColumnName("account_type");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.AppUserReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_on");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text")
                        .HasColumnName("app_user_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("integer")
                        .HasColumnName("review_status");

                    b.Property<string>("ReviewerDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("reviewer_display_name");

                    b.Property<string>("ReviewerEmail")
                        .HasColumnType("text")
                        .HasColumnName("reviewer_email");

                    b.Property<string>("ReviewerPhone")
                        .HasColumnType("text")
                        .HasColumnName("reviewer_phone");

                    b.Property<string>("ReviewerUsername")
                        .HasColumnType("text")
                        .HasColumnName("reviewer_username");

                    b.Property<int[]>("ServiceCategories")
                        .HasColumnType("integer[]")
                        .HasColumnName("service_categories");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_app_user_review");

                    b.HasIndex("AppUserId")
                        .HasDatabaseName("ix_app_user_review_app_user_id");

                    b.ToTable("app_user_review", (string)null);
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.Photo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text")
                        .HasColumnName("app_user_id");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_photo");

                    b.HasIndex("AppUserId")
                        .HasDatabaseName("ix_photo_app_user_id");

                    b.ToTable("photo", (string)null);
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessStatus")
                        .HasColumnType("integer")
                        .HasColumnName("access_status");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_on");

                    b.Property<string>("CompanyReference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_reference");

                    b.Property<string>("CompanyRegistrationNumber")
                        .HasColumnType("text")
                        .HasColumnName("company_registration_number");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LegalName")
                        .HasColumnType("text")
                        .HasColumnName("legal_name");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uuid")
                        .HasColumnName("membership_id");

                    b.Property<int[]>("RedressSchemes")
                        .HasColumnType("integer[]")
                        .HasColumnName("redress_schemes");

                    b.Property<int[]>("ServiceCategories")
                        .HasColumnType("integer[]")
                        .HasColumnName("service_categories");

                    b.Property<string>("ServiceLocations")
                        .HasColumnType("text")
                        .HasColumnName("service_locations");

                    b.Property<string>("SummaryDescription")
                        .HasColumnType("text")
                        .HasColumnName("summary_description");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasAlternateKey("CompanyReference")
                        .HasName("ak_companies_company_reference");

                    b.HasIndex("MembershipId")
                        .HasDatabaseName("ix_companies_membership_id");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("Domain.CompanyAggregate.CompanyContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text")
                        .HasColumnName("caption");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<bool>("IsLogo")
                        .HasColumnType("boolean")
                        .HasColumnName("is_logo");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_company_content");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_company_content_company_id");

                    b.ToTable("company_content", (string)null);
                });

            modelBuilder.Entity("Domain.CompanyAggregate.CompanyDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("Heading")
                        .HasColumnType("text")
                        .HasColumnName("heading");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_company_description");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_company_description_company_id");

                    b.ToTable("company_description", (string)null);
                });

            modelBuilder.Entity("Domain.CompanyAggregate.CompanyReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_on");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("integer")
                        .HasColumnName("review_status");

                    b.Property<string>("ReviewerDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("reviewer_display_name");

                    b.Property<string>("ReviewerEmail")
                        .HasColumnType("text")
                        .HasColumnName("reviewer_email");

                    b.Property<string>("ReviewerPhone")
                        .HasColumnType("text")
                        .HasColumnName("reviewer_phone");

                    b.Property<string>("ReviewerUsername")
                        .HasColumnType("text")
                        .HasColumnName("reviewer_username");

                    b.Property<int[]>("ServiceCategories")
                        .HasColumnType("integer[]")
                        .HasColumnName("service_categories");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_company_review");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_company_review_company_id");

                    b.ToTable("company_review", (string)null);
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Insurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry");

                    b.Property<string>("IndemnityLimit")
                        .HasColumnType("text")
                        .HasColumnName("indemnity_limit");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("text")
                        .HasColumnName("policy_number");

                    b.Property<string>("Provider")
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_insurance");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_insurance_company_id");

                    b.ToTable("insurance", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceAggregate.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text")
                        .HasColumnName("client_secret");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invoice_date");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("integer")
                        .HasColumnName("invoice_number");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uuid")
                        .HasColumnName("membership_id");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("text")
                        .HasColumnName("payment_intent_id");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer")
                        .HasColumnName("payment_status");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<long>("VatPercentage")
                        .HasColumnType("bigint")
                        .HasColumnName("vat_percentage");

                    b.HasKey("Id")
                        .HasName("pk_invoices");

                    b.HasIndex("MembershipId")
                        .HasDatabaseName("ix_invoices_membership_id");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceAggregate.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<long>("VatPercentage")
                        .HasColumnType("bigint")
                        .HasColumnName("vat_percentage");

                    b.HasKey("Id")
                        .HasName("pk_invoice_item");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("ix_invoice_item_invoice_id");

                    b.ToTable("invoice_item", (string)null);
                });

            modelBuilder.Entity("Domain.JobAggregate.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("FinishBy")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finish_by");

                    b.Property<int>("JobLifeCycle")
                        .HasColumnType("integer")
                        .HasColumnName("job_life_cycle");

                    b.Property<int[]>("ServiceCategories")
                        .HasColumnType("integer[]")
                        .HasColumnName("service_categories");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_jobs");

                    b.ToTable("jobs", (string)null);
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text")
                        .HasColumnName("caption");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_job_content");

                    b.HasIndex("JobId")
                        .HasDatabaseName("ix_job_content_job_id");

                    b.ToTable("job_content", (string)null);
                });

            modelBuilder.Entity("Domain.JobNetwork", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("text")
                        .HasColumnName("app_user_id");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("AppUserId", "JobId")
                        .HasName("pk_job_network");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("ix_job_network_invoice_id");

                    b.HasIndex("JobId")
                        .HasDatabaseName("ix_job_network_job_id");

                    b.ToTable("job_network", (string)null);
                });

            modelBuilder.Entity("Domain.ListingAggregate.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessStatus")
                        .HasColumnType("integer")
                        .HasColumnName("access_status");

                    b.Property<bool>("Accessibility")
                        .HasColumnType("boolean")
                        .HasColumnName("accessibility");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_on");

                    b.Property<string>("AdministrationFees")
                        .HasColumnType("text")
                        .HasColumnName("administration_fees");

                    b.Property<double>("AnnualBusinessRates")
                        .HasColumnType("double precision")
                        .HasColumnName("annual_business_rates");

                    b.Property<int>("AvailableBedrooms")
                        .HasColumnType("integer")
                        .HasColumnName("available_bedrooms");

                    b.Property<DateTime>("AvailableFromDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("available_from_date");

                    b.Property<bool>("Basement")
                        .HasColumnType("boolean")
                        .HasColumnName("basement");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("integer")
                        .HasColumnName("bathrooms");

                    b.Property<int[]>("BillsIncluded")
                        .HasColumnType("integer[]")
                        .HasColumnName("bills_included");

                    b.Property<bool>("BurglarAlarm")
                        .HasColumnType("boolean")
                        .HasColumnName("burglar_alarm");

                    b.Property<bool>("BusinessForSale")
                        .HasColumnType("boolean")
                        .HasColumnName("business_for_sale");

                    b.Property<int[]>("BuyerIncentives")
                        .HasColumnType("integer[]")
                        .HasColumnName("buyer_incentives");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<int>("CentralHeating")
                        .HasColumnType("integer")
                        .HasColumnName("central_heating");

                    b.Property<bool>("ChainFree")
                        .HasColumnType("boolean")
                        .HasColumnName("chain_free");

                    b.Property<List<string>>("CommercialUseClass")
                        .HasColumnType("text[]")
                        .HasColumnName("commercial_use_class");

                    b.Property<string>("CompanyReference")
                        .HasColumnType("text")
                        .HasColumnName("company_reference");

                    b.Property<int[]>("ConnectedUtilities")
                        .HasColumnType("integer[]")
                        .HasColumnName("connected_utilities");

                    b.Property<bool>("Conservatory")
                        .HasColumnType("boolean")
                        .HasColumnName("conservatory");

                    b.Property<int>("ConstructionYear")
                        .HasColumnType("integer")
                        .HasColumnName("construction_year");

                    b.Property<int>("CookerType")
                        .HasColumnType("integer")
                        .HasColumnName("cooker_type");

                    b.Property<int>("CouncilTaxBand")
                        .HasColumnType("integer")
                        .HasColumnName("council_tax_band");

                    b.Property<int>("DecorativeCondition")
                        .HasColumnType("integer")
                        .HasColumnName("decorative_condition");

                    b.Property<double>("Deposit")
                        .HasColumnType("double precision")
                        .HasColumnName("deposit");

                    b.Property<bool>("DoubleGlazing")
                        .HasColumnType("boolean")
                        .HasColumnName("double_glazing");

                    b.Property<List<string>>("FeatureList")
                        .HasColumnType("text[]")
                        .HasColumnName("feature_list");

                    b.Property<bool>("FeatureProperty")
                        .HasColumnType("boolean")
                        .HasColumnName("feature_property");

                    b.Property<bool>("Fireplace")
                        .HasColumnType("boolean")
                        .HasColumnName("fireplace");

                    b.Property<bool>("FishingRights")
                        .HasColumnType("boolean")
                        .HasColumnName("fishing_rights");

                    b.Property<List<int>>("FloorLevels")
                        .HasColumnType("integer[]")
                        .HasColumnName("floor_levels");

                    b.Property<int>("Floors")
                        .HasColumnType("integer")
                        .HasColumnName("floors");

                    b.Property<bool>("Freezer")
                        .HasColumnType("boolean")
                        .HasColumnName("freezer");

                    b.Property<bool>("Fridge")
                        .HasColumnType("boolean")
                        .HasColumnName("fridge");

                    b.Property<int>("FurnishedState")
                        .HasColumnType("integer")
                        .HasColumnName("furnished_state");

                    b.Property<double>("GroundRent")
                        .HasColumnType("double precision")
                        .HasColumnName("ground_rent");

                    b.Property<bool>("Gym")
                        .HasColumnType("boolean")
                        .HasColumnName("gym");

                    b.Property<int>("LifeCycleStatus")
                        .HasColumnType("integer")
                        .HasColumnName("life_cycle_status");

                    b.Property<int>("ListedBuildingGrade")
                        .HasColumnType("integer")
                        .HasColumnName("listed_building_grade");

                    b.Property<string>("ListingReference")
                        .HasColumnType("text")
                        .HasColumnName("listing_reference");

                    b.Property<int>("LivingRooms")
                        .HasColumnType("integer")
                        .HasColumnName("living_rooms");

                    b.Property<bool>("Loft")
                        .HasColumnType("boolean")
                        .HasColumnName("loft");

                    b.Property<bool>("NewBuild")
                        .HasColumnType("boolean")
                        .HasColumnName("new_build");

                    b.Property<DateTime>("OpenDay")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("open_day");

                    b.Property<bool>("Outbuildings")
                        .HasColumnType("boolean")
                        .HasColumnName("outbuildings");

                    b.Property<int[]>("OutsideSpaces")
                        .HasColumnType("integer[]")
                        .HasColumnName("outside_spaces");

                    b.Property<int[]>("Parking")
                        .HasColumnType("integer[]")
                        .HasColumnName("parking");

                    b.Property<bool>("PetsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("pets_allowed");

                    b.Property<bool>("PorterSecurity")
                        .HasColumnType("boolean")
                        .HasColumnName("porter_security");

                    b.Property<int>("PropertyType")
                        .HasColumnType("integer")
                        .HasColumnName("property_type");

                    b.Property<int>("RateableValue")
                        .HasColumnType("integer")
                        .HasColumnName("rateable_value");

                    b.Property<int>("RentalTerm")
                        .HasColumnType("integer")
                        .HasColumnName("rental_term");

                    b.Property<bool>("Repossession")
                        .HasColumnType("boolean")
                        .HasColumnName("repossession");

                    b.Property<bool>("Retirement")
                        .HasColumnType("boolean")
                        .HasColumnName("retirement");

                    b.Property<int>("SapRating")
                        .HasColumnType("integer")
                        .HasColumnName("sap_rating");

                    b.Property<bool>("Serviced")
                        .HasColumnType("boolean")
                        .HasColumnName("serviced");

                    b.Property<bool>("SharedAccommodation")
                        .HasColumnType("boolean")
                        .HasColumnName("shared_accommodation");

                    b.Property<string>("SummaryDescription")
                        .HasColumnType("text")
                        .HasColumnName("summary_description");

                    b.Property<bool>("SwimmingPool")
                        .HasColumnType("boolean")
                        .HasColumnName("swimming_pool");

                    b.Property<bool>("Tenanted")
                        .HasColumnType("boolean")
                        .HasColumnName("tenanted");

                    b.Property<bool>("TennisCourt")
                        .HasColumnType("boolean")
                        .HasColumnName("tennis_court");

                    b.Property<int>("Tenure")
                        .HasColumnType("integer")
                        .HasColumnName("tenure");

                    b.Property<int>("TotalBedrooms")
                        .HasColumnType("integer")
                        .HasColumnName("total_bedrooms");

                    b.Property<bool>("UtilityRoom")
                        .HasColumnType("boolean")
                        .HasColumnName("utility_room");

                    b.Property<bool>("WaterFront")
                        .HasColumnType("boolean")
                        .HasColumnName("water_front");

                    b.Property<bool>("WoodFloors")
                        .HasColumnType("boolean")
                        .HasColumnName("wood_floors");

                    b.HasKey("Id")
                        .HasName("pk_listings");

                    b.HasIndex("CompanyReference")
                        .HasDatabaseName("ix_listings_company_reference");

                    b.ToTable("listings", (string)null);
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.Areas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid")
                        .HasColumnName("listing_id");

                    b.HasKey("Id")
                        .HasName("pk_areas");

                    b.HasIndex("ListingId")
                        .IsUnique()
                        .HasDatabaseName("ix_areas_listing_id");

                    b.ToTable("areas", (string)null);
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text")
                        .HasColumnName("caption");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid")
                        .HasColumnName("listing_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_content");

                    b.HasIndex("ListingId")
                        .HasDatabaseName("ix_content_listing_id");

                    b.ToTable("content", (string)null);
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.DetailedDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Heading")
                        .HasColumnType("text")
                        .HasColumnName("heading");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid")
                        .HasColumnName("listing_id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_detailed_description");

                    b.HasIndex("ListingId")
                        .HasDatabaseName("ix_detailed_description_listing_id");

                    b.ToTable("detailed_description", (string)null);
                });

            modelBuilder.Entity("Domain.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyReference")
                        .HasColumnType("text")
                        .HasColumnName("company_reference");

                    b.Property<int>("ContractLength")
                        .HasColumnType("integer")
                        .HasColumnName("contract_length");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("MemberSince")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("member_since");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<int>("Unit")
                        .HasColumnType("integer")
                        .HasColumnName("unit");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<long>("VatPercentage")
                        .HasColumnType("bigint")
                        .HasColumnName("vat_percentage");

                    b.HasKey("Id")
                        .HasName("pk_membership");

                    b.ToTable("membership", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "0ad36e38-fd90-4199-83dc-8eb97006f886",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "c3a9f921-76a6-4f4e-8a85-2d99dd4a7831",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "64af608a-bc64-40c2-8479-b5a4e9bb3308",
                            Name = "Agency",
                            NormalizedName = "AGENCY"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "345eca16-0ebc-4d3d-b0fe-5877da1eeb57",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.AppUserReview", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", null)
                        .WithMany("Reviews")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("fk_app_user_review_users_app_user_id");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.Photo", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", null)
                        .WithMany("Photos")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("fk_photo_users_app_user_id");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Company", b =>
                {
                    b.HasOne("Domain.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId")
                        .HasConstraintName("fk_companies_membership_membership_id");

                    b.OwnsOne("Domain.CompanyAggregate.CompanyAddress", "CompanyAddress", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Country")
                                .HasColumnType("integer")
                                .HasColumnName("company_address_country");

                            b1.Property<string>("County")
                                .HasColumnType("text")
                                .HasColumnName("company_address_county");

                            b1.Property<string>("Locality")
                                .HasColumnType("text")
                                .HasColumnName("company_address_locality");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("company_address_postal_code");

                            b1.Property<string>("PropertyNumberOrName")
                                .HasColumnType("text")
                                .HasColumnName("company_address_property_number_or_name");

                            b1.Property<string>("StreetName")
                                .HasColumnType("text")
                                .HasColumnName("company_address_street_name");

                            b1.Property<string>("TownOrCity")
                                .HasColumnType("text")
                                .HasColumnName("company_address_town_or_city");

                            b1.HasKey("CompanyId");

                            b1.ToTable("companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId")
                                .HasConstraintName("fk_companies_companies_id");

                            b1.OwnsOne("Domain.LocationAggregate.Coordinates", "Coordinates", b2 =>
                                {
                                    b2.Property<Guid>("CompanyAddressCompanyId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("double precision")
                                        .HasColumnName("company_address_coordinates_latitude");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("double precision")
                                        .HasColumnName("company_address_coordinates_longitude");

                                    b2.HasKey("CompanyAddressCompanyId");

                                    b2.ToTable("companies");

                                    b2.WithOwner()
                                        .HasForeignKey("CompanyAddressCompanyId")
                                        .HasConstraintName("fk_companies_companies_id");
                                });

                            b1.Navigation("Coordinates");
                        });

                    b.OwnsOne("Domain.CompanyAggregate.CompanyContacts", "CompanyContacts", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("company_contacts_email");

                            b1.Property<string>("Phone")
                                .HasColumnType("text")
                                .HasColumnName("company_contacts_phone");

                            b1.Property<string>("Website")
                                .HasColumnType("text")
                                .HasColumnName("company_contacts_website");

                            b1.HasKey("CompanyId");

                            b1.ToTable("companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId")
                                .HasConstraintName("fk_companies_companies_id");
                        });

                    b.Navigation("CompanyAddress");

                    b.Navigation("CompanyContacts");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.CompanyContent", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("CompanyContents")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_content_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.CompanyDescription", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("CompanyDescriptions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_description_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.CompanyReview", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", null)
                        .WithMany("Reviews")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_company_review_companies_company_id");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Insurance", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("Insurances")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_insurance_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.InvoiceAggregate.Invoice", b =>
                {
                    b.HasOne("Domain.Membership", null)
                        .WithMany("Invoices")
                        .HasForeignKey("MembershipId")
                        .HasConstraintName("fk_invoices_membership_membership_id");
                });

            modelBuilder.Entity("Domain.InvoiceAggregate.InvoiceItem", b =>
                {
                    b.HasOne("Domain.InvoiceAggregate.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invoice_item_invoices_invoice_id");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Domain.JobAggregate.Job", b =>
                {
                    b.OwnsOne("Domain.JobAggregate.Objects.JobLocation", "JobLocation", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Country")
                                .HasColumnType("integer")
                                .HasColumnName("job_location_country");

                            b1.Property<string>("County")
                                .HasColumnType("text")
                                .HasColumnName("job_location_county");

                            b1.Property<string>("Locality")
                                .HasColumnType("text")
                                .HasColumnName("job_location_locality");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("job_location_postal_code");

                            b1.Property<string>("PropertyNumberOrName")
                                .HasColumnType("text")
                                .HasColumnName("job_location_property_number_or_name");

                            b1.Property<string>("StreetName")
                                .HasColumnType("text")
                                .HasColumnName("job_location_street_name");

                            b1.Property<string>("TownOrCity")
                                .HasColumnType("text")
                                .HasColumnName("job_location_town_or_city");

                            b1.HasKey("JobId");

                            b1.ToTable("jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId")
                                .HasConstraintName("fk_jobs_jobs_id");

                            b1.OwnsOne("Domain.LocationAggregate.Coordinates", "Coordinates", b2 =>
                                {
                                    b2.Property<Guid>("JobLocationJobId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("double precision")
                                        .HasColumnName("job_location_coordinates_latitude");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("double precision")
                                        .HasColumnName("job_location_coordinates_longitude");

                                    b2.HasKey("JobLocationJobId");

                                    b2.ToTable("jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("JobLocationJobId")
                                        .HasConstraintName("fk_jobs_jobs_id");
                                });

                            b1.Navigation("Coordinates");
                        });

                    b.Navigation("JobLocation");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobContent", b =>
                {
                    b.HasOne("Domain.JobAggregate.Job", "Job")
                        .WithMany("JobContents")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_content_jobs_job_id");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.JobNetwork", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithMany("Jobs")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_network_users_app_user_id");

                    b.HasOne("Domain.InvoiceAggregate.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("fk_job_network_invoices_invoice_id");

                    b.HasOne("Domain.JobAggregate.Job", "Job")
                        .WithMany("Networks")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_network_jobs_job_id");

                    b.Navigation("AppUser");

                    b.Navigation("Invoice");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Listing", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("Listings")
                        .HasForeignKey("CompanyReference")
                        .HasPrincipalKey("CompanyReference")
                        .HasConstraintName("fk_listings_companies_company_id");

                    b.OwnsOne("Domain.ListingAggregate.Objects.EpcRatings", "EpcRatings", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("EerCurrentRating")
                                .HasColumnType("integer")
                                .HasColumnName("epc_ratings_eer_current_rating");

                            b1.Property<int>("EerPotentialRating")
                                .HasColumnType("integer")
                                .HasColumnName("epc_ratings_eer_potential_rating");

                            b1.Property<int>("EirCurrentRating")
                                .HasColumnType("integer")
                                .HasColumnName("epc_ratings_eir_current_rating");

                            b1.Property<int>("EirPotentialRating")
                                .HasColumnType("integer")
                                .HasColumnName("epc_ratings_eir_potential_rating");

                            b1.HasKey("ListingId");

                            b1.ToTable("listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId")
                                .HasConstraintName("fk_listings_listings_id");
                        });

                    b.OwnsOne("Domain.ListingAggregate.Objects.LeaseExpiry", "LeaseExpiry", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ExpiryDate")
                                .HasColumnType("text")
                                .HasColumnName("lease_expiry_expiry_date");

                            b1.Property<int>("YearsRemaining")
                                .HasColumnType("integer")
                                .HasColumnName("lease_expiry_years_remaining");

                            b1.HasKey("ListingId");

                            b1.ToTable("listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId")
                                .HasConstraintName("fk_listings_listings_id");
                        });

                    b.OwnsOne("Domain.ListingAggregate.Objects.ListingLocation", "ListingLocation", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Country")
                                .HasColumnType("integer")
                                .HasColumnName("listing_location_country");

                            b1.Property<string>("County")
                                .HasColumnType("text")
                                .HasColumnName("listing_location_county");

                            b1.Property<string>("Locality")
                                .HasColumnType("text")
                                .HasColumnName("listing_location_locality");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("listing_location_postal_code");

                            b1.Property<string>("PropertyNumberOrName")
                                .HasColumnType("text")
                                .HasColumnName("listing_location_property_number_or_name");

                            b1.Property<string>("StreetName")
                                .HasColumnType("text")
                                .HasColumnName("listing_location_street_name");

                            b1.Property<string>("TownOrCity")
                                .HasColumnType("text")
                                .HasColumnName("listing_location_town_or_city");

                            b1.HasKey("ListingId");

                            b1.ToTable("listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId")
                                .HasConstraintName("fk_listings_listings_id");

                            b1.OwnsOne("Domain.LocationAggregate.Coordinates", "Coordinates", b2 =>
                                {
                                    b2.Property<Guid>("ListingLocationListingId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("double precision")
                                        .HasColumnName("listing_location_coordinates_latitude");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("double precision")
                                        .HasColumnName("listing_location_coordinates_longitude");

                                    b2.HasKey("ListingLocationListingId");

                                    b2.ToTable("listings");

                                    b2.WithOwner()
                                        .HasForeignKey("ListingLocationListingId")
                                        .HasConstraintName("fk_listings_listings_id");
                                });

                            b1.Navigation("Coordinates");
                        });

                    b.OwnsOne("Domain.ListingAggregate.Objects.MinimumContractLength", "MinimumContractLength", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("MinimumLength")
                                .HasColumnType("integer")
                                .HasColumnName("minimum_contract_length_minimum_length");

                            b1.Property<int>("Units")
                                .HasColumnType("integer")
                                .HasColumnName("minimum_contract_length_units");

                            b1.HasKey("ListingId");

                            b1.ToTable("listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId")
                                .HasConstraintName("fk_listings_listings_id");
                        });

                    b.OwnsOne("Domain.ListingAggregate.Objects.Pricing", "Pricing", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<bool>("Auction")
                                .HasColumnType("boolean")
                                .HasColumnName("pricing_auction");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer")
                                .HasColumnName("pricing_currency");

                            b1.Property<double>("Price")
                                .HasColumnType("double precision")
                                .HasColumnName("pricing_price");

                            b1.Property<int>("PriceQualifier")
                                .HasColumnType("integer")
                                .HasColumnName("pricing_price_qualifier");

                            b1.Property<int>("RentFrequency")
                                .HasColumnType("integer")
                                .HasColumnName("pricing_rent_frequency");

                            b1.Property<int>("TransactionType")
                                .HasColumnType("integer")
                                .HasColumnName("pricing_transaction_type");

                            b1.HasKey("ListingId");

                            b1.ToTable("listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId")
                                .HasConstraintName("fk_listings_listings_id");

                            b1.OwnsOne("Domain.ListingAggregate.Objects.PricePerUnitArea", "PricePerUnitArea", b2 =>
                                {
                                    b2.Property<Guid>("PricingListingId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<double>("Price")
                                        .HasColumnType("double precision")
                                        .HasColumnName("pricing_price_per_unit_area_price");

                                    b2.Property<int>("Units")
                                        .HasColumnType("integer")
                                        .HasColumnName("pricing_price_per_unit_area_units");

                                    b2.HasKey("PricingListingId");

                                    b2.ToTable("listings");

                                    b2.WithOwner()
                                        .HasForeignKey("PricingListingId")
                                        .HasConstraintName("fk_listings_listings_id");
                                });

                            b1.Navigation("PricePerUnitArea");
                        });

                    b.OwnsOne("Domain.ListingAggregate.Objects.ServiceCharge", "ServiceCharge", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<double>("Charge")
                                .HasColumnType("double precision")
                                .HasColumnName("service_charge_charge");

                            b1.Property<int>("Frequency")
                                .HasColumnType("integer")
                                .HasColumnName("service_charge_frequency");

                            b1.Property<int>("PerUnitAreaUnits")
                                .HasColumnType("integer")
                                .HasColumnName("service_charge_per_unit_area_units");

                            b1.HasKey("ListingId");

                            b1.ToTable("listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId")
                                .HasConstraintName("fk_listings_listings_id");
                        });

                    b.OwnsOne("Domain.ListingAggregate.Objects.TenantEligibility", "TenantEligibility", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Dss")
                                .HasColumnType("integer")
                                .HasColumnName("tenant_eligibility_dss");

                            b1.Property<int>("Students")
                                .HasColumnType("integer")
                                .HasColumnName("tenant_eligibility_students");

                            b1.HasKey("ListingId");

                            b1.ToTable("listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId")
                                .HasConstraintName("fk_listings_listings_id");
                        });

                    b.Navigation("Company");

                    b.Navigation("EpcRatings");

                    b.Navigation("LeaseExpiry");

                    b.Navigation("ListingLocation");

                    b.Navigation("MinimumContractLength");

                    b.Navigation("Pricing");

                    b.Navigation("ServiceCharge");

                    b.Navigation("TenantEligibility");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.Areas", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithOne("Areas")
                        .HasForeignKey("Domain.ListingAggregate.Objects.Areas", "ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_areas_listings_listing_id");

                    b.OwnsOne("Domain.ListingAggregate.Objects.Area", "External", b1 =>
                        {
                            b1.Property<Guid>("AreasId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Units")
                                .HasColumnType("integer")
                                .HasColumnName("external_units");

                            b1.Property<double>("Value")
                                .HasColumnType("double precision")
                                .HasColumnName("external_value");

                            b1.HasKey("AreasId");

                            b1.ToTable("areas");

                            b1.WithOwner()
                                .HasForeignKey("AreasId")
                                .HasConstraintName("fk_areas_areas_id");
                        });

                    b.OwnsOne("Domain.ListingAggregate.Objects.Area", "Internal", b1 =>
                        {
                            b1.Property<Guid>("AreasId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Units")
                                .HasColumnType("integer")
                                .HasColumnName("internal_units");

                            b1.Property<double>("Value")
                                .HasColumnType("double precision")
                                .HasColumnName("internal_value");

                            b1.HasKey("AreasId");

                            b1.ToTable("areas");

                            b1.WithOwner()
                                .HasForeignKey("AreasId")
                                .HasConstraintName("fk_areas_areas_id");
                        });

                    b.Navigation("External");

                    b.Navigation("Internal");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.Content", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithMany("Contents")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_content_listings_listing_id");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.DetailedDescription", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithMany("DetailedDescriptions")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_detailed_description_listings_listing_id");

                    b.OwnsOne("Domain.ListingAggregate.Objects.Dimensions", "Dimensions", b1 =>
                        {
                            b1.Property<int>("DetailedDescriptionId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<double>("Length")
                                .HasColumnType("double precision")
                                .HasColumnName("dimensions_length");

                            b1.Property<int>("Unit")
                                .HasColumnType("integer")
                                .HasColumnName("dimensions_unit");

                            b1.Property<double>("Width")
                                .HasColumnType("double precision")
                                .HasColumnName("dimensions_width");

                            b1.HasKey("DetailedDescriptionId");

                            b1.ToTable("detailed_description");

                            b1.WithOwner()
                                .HasForeignKey("DetailedDescriptionId")
                                .HasConstraintName("fk_detailed_description_detailed_description_id");
                        });

                    b.Navigation("Dimensions");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Domain.AppUserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.AppUser", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Photos");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Company", b =>
                {
                    b.Navigation("CompanyContents");

                    b.Navigation("CompanyDescriptions");

                    b.Navigation("Insurances");

                    b.Navigation("Listings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.InvoiceAggregate.Invoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.JobAggregate.Job", b =>
                {
                    b.Navigation("JobContents");

                    b.Navigation("Networks");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Listing", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Contents");

                    b.Navigation("DetailedDescriptions");
                });

            modelBuilder.Entity("Domain.Membership", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
