// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221208161730_PostgresInitial")]
    partial class PostgresInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "property_type", new[] { "barn_conversion", "block_of_flats", "bungalow", "business_park", "chalet", "chateau", "cottage", "country_house", "detached", "detached_bungalow", "end_terrace", "equestrian", "farm", "farmhouse", "finca", "flat", "hotel", "houseboat", "industrial", "land", "leisure", "light_industrial", "link_detached", "lodge", "longere", "maisonette", "mews", "office", "park_home", "parking", "pub_bar", "restaurant", "retail", "riad", "semi_detached", "semi_detached_bungalow", "studio", "terraced", "terraced_bungalow", "town_house", "villa", "warehouse" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyPostalCode")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uuid");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("RedressScheme")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Available")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uuid");

                    b.Property<int>("RedressScheme")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceCategory")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceLocations")
                        .HasColumnType("text");

                    b.Property<string>("ServiceScope")
                        .HasColumnType("text");

                    b.Property<string>("SummaryDescription")
                        .HasColumnType("text");

                    b.Property<List<string>>("Usernames")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.CompanyContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyContents");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.CompanyDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Heading")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyDescriptions");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Insurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Amount")
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Insurer")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("Domain.InvoiceAggregate.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("text");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<long>("Total")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalNet")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalVat")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.HasIndex("OrderId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Domain.InvoiceAggregate.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<long>("Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Vat")
                        .HasColumnType("bigint");

                    b.Property<long>("VatPercentage")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("Accessibility")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AdministrationFees")
                        .HasColumnType("text");

                    b.Property<double>("AnnualBusinessRates")
                        .HasColumnType("double precision");

                    b.Property<int>("AvailableBedrooms")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AvailableFromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Basement")
                        .HasColumnType("boolean");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("integer");

                    b.Property<int[]>("BillsIncluded")
                        .HasColumnType("integer[]");

                    b.Property<bool>("BurglarAlarm")
                        .HasColumnType("boolean");

                    b.Property<bool>("BusinessForSale")
                        .HasColumnType("boolean");

                    b.Property<int[]>("BuyerIncentives")
                        .HasColumnType("integer[]");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("CentralHeating")
                        .HasColumnType("integer");

                    b.Property<bool>("ChainFree")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("CommercialUseClass")
                        .HasColumnType("text[]");

                    b.Property<string>("CompanyReference")
                        .HasColumnType("text");

                    b.Property<int[]>("ConnectedUtilities")
                        .HasColumnType("integer[]");

                    b.Property<bool>("Conservatory")
                        .HasColumnType("boolean");

                    b.Property<int>("ConstructionYear")
                        .HasColumnType("integer");

                    b.Property<int>("CookerType")
                        .HasColumnType("integer");

                    b.Property<int>("CouncilTaxBand")
                        .HasColumnType("integer");

                    b.Property<int>("DecorativeCondition")
                        .HasColumnType("integer");

                    b.Property<double>("Deposit")
                        .HasColumnType("double precision");

                    b.Property<bool>("DoubleGlazing")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("FeatureList")
                        .HasColumnType("text[]");

                    b.Property<bool>("FeatureProperty")
                        .HasColumnType("boolean");

                    b.Property<bool>("Fireplace")
                        .HasColumnType("boolean");

                    b.Property<bool>("FishingRights")
                        .HasColumnType("boolean");

                    b.Property<List<int>>("FloorLevels")
                        .HasColumnType("integer[]");

                    b.Property<int>("Floors")
                        .HasColumnType("integer");

                    b.Property<bool>("Freezer")
                        .HasColumnType("boolean");

                    b.Property<bool>("Fridge")
                        .HasColumnType("boolean");

                    b.Property<int>("FurnishedState")
                        .HasColumnType("integer");

                    b.Property<double>("GroundRent")
                        .HasColumnType("double precision");

                    b.Property<bool>("Gym")
                        .HasColumnType("boolean");

                    b.Property<int>("LifeCycleStatus")
                        .HasColumnType("integer");

                    b.Property<int>("ListedBuildingGrade")
                        .HasColumnType("integer");

                    b.Property<string>("ListingReference")
                        .HasColumnType("text");

                    b.Property<int>("LivingRooms")
                        .HasColumnType("integer");

                    b.Property<bool>("Loft")
                        .HasColumnType("boolean");

                    b.Property<bool>("NewBuild")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OpenDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Outbuildings")
                        .HasColumnType("boolean");

                    b.Property<int[]>("OutsideSpaces")
                        .HasColumnType("integer[]");

                    b.Property<int[]>("Parking")
                        .HasColumnType("integer[]");

                    b.Property<bool>("PetsAllowed")
                        .HasColumnType("boolean");

                    b.Property<bool>("PorterSecurity")
                        .HasColumnType("boolean");

                    b.Property<int>("PropertyType")
                        .HasColumnType("integer");

                    b.Property<int>("RateableValue")
                        .HasColumnType("integer");

                    b.Property<int>("RentalTerm")
                        .HasColumnType("integer");

                    b.Property<bool>("Repossession")
                        .HasColumnType("boolean");

                    b.Property<bool>("Retirement")
                        .HasColumnType("boolean");

                    b.Property<int>("SapRating")
                        .HasColumnType("integer");

                    b.Property<bool>("Serviced")
                        .HasColumnType("boolean");

                    b.Property<bool>("SharedAccommodation")
                        .HasColumnType("boolean");

                    b.Property<string>("SummaryDescription")
                        .HasColumnType("text");

                    b.Property<bool>("SwimmingPool")
                        .HasColumnType("boolean");

                    b.Property<bool>("Tenanted")
                        .HasColumnType("boolean");

                    b.Property<bool>("TennisCourt")
                        .HasColumnType("boolean");

                    b.Property<int>("Tenure")
                        .HasColumnType("integer");

                    b.Property<int>("TotalBedrooms")
                        .HasColumnType("integer");

                    b.Property<bool>("UtilityRoom")
                        .HasColumnType("boolean");

                    b.Property<bool>("WaterFront")
                        .HasColumnType("boolean");

                    b.Property<bool>("WoodFloors")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CompanyReference");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.Areas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ListingId")
                        .IsUnique();

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.DetailedDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Heading")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("DetailedDescriptions");
                });

            modelBuilder.Entity("Domain.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("ComissionPercentage")
                        .HasColumnType("double precision");

                    b.Property<string>("CompanyReference")
                        .HasColumnType("text");

                    b.Property<DateTime>("ContractEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ContractLength")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ContractStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Unit")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Membership");
                });

            modelBuilder.Entity("Domain.MembershipAggregate.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uuid");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<double>("Total")
                        .HasColumnType("double precision");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("Domain.OrderAggregate.AcceptanceForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AcceptanceTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<long>("GoodsValue")
                        .HasColumnType("bigint");

                    b.Property<long>("GoodsValueToBeStored")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("StorageRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("TermsAndConditions")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("AcceptanceForms");
                });

            modelBuilder.Entity("Domain.OrderAggregate.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuyerEmail")
                        .HasColumnType("text");

                    b.Property<string>("BuyerId")
                        .HasColumnType("text");

                    b.Property<string>("BuyerMessage")
                        .HasColumnType("text");

                    b.Property<string>("BuyerName")
                        .HasColumnType("text");

                    b.Property<string>("BuyerPhone")
                        .HasColumnType("text");

                    b.Property<int>("Cancellation")
                        .HasColumnType("integer");

                    b.Property<long>("Commission")
                        .HasColumnType("bigint");

                    b.Property<long>("CommissionPercentage")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("text");

                    b.Property<int>("ServiceCategory")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceSchedule")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.OrderAggregate.OrderAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Country")
                        .HasColumnType("integer");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsCurrentAddress")
                        .HasColumnType("boolean");

                    b.Property<string>("Locality")
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("PafUdprn")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PropertyNumberOrName")
                        .HasColumnType("text");

                    b.Property<string>("StreetName")
                        .HasColumnType("text");

                    b.Property<string>("TownOrCity")
                        .HasColumnType("text");

                    b.Property<string>("What3words")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrdersAddresses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "e0f83cd6-3e8a-464b-886f-4244d6870df0",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "d57039f3-b517-4fb9-8795-690a3bb60dad",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "8843e7da-4ce2-413a-b0e1-ce2fdc751257",
                            Name = "Agency",
                            NormalizedName = "AGENCY"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "f695bbc4-ac84-42fb-99c1-a2a272f97761",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.HasOne("Domain.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Availability", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("Availabilities")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Company", b =>
                {
                    b.HasOne("Domain.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId");

                    b.OwnsOne("Domain.CompanyAggregate.CompanyAddress", "CompanyAddress", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Country")
                                .HasColumnType("integer");

                            b1.Property<string>("County")
                                .HasColumnType("text");

                            b1.Property<string>("Locality")
                                .HasColumnType("text");

                            b1.Property<string>("PafUdprn")
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PropertyNumberOrName")
                                .HasColumnType("text");

                            b1.Property<string>("StreetName")
                                .HasColumnType("text");

                            b1.Property<string>("TownOrCity")
                                .HasColumnType("text");

                            b1.Property<string>("What3words")
                                .HasColumnType("text");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");

                            b1.OwnsOne("Domain.LocationAggregate.Coordinates", "Coordinates", b2 =>
                                {
                                    b2.Property<Guid>("CompanyAddressCompanyId")
                                        .HasColumnType("uuid");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("double precision");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("double precision");

                                    b2.HasKey("CompanyAddressCompanyId");

                                    b2.ToTable("Companies");

                                    b2.WithOwner()
                                        .HasForeignKey("CompanyAddressCompanyId");
                                });

                            b1.Navigation("Coordinates");
                        });

                    b.OwnsOne("Domain.CompanyAggregate.CompanyContacts", "CompanyContacts", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Phone")
                                .HasColumnType("text");

                            b1.Property<string>("Website")
                                .HasColumnType("text");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("Domain.CompanyAggregate.CompanyDetails", "CompanyDetails", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<int>("AccountNumber")
                                .HasColumnType("integer");

                            b1.Property<bool>("AddressVerified")
                                .HasColumnType("boolean");

                            b1.Property<string>("BankName")
                                .HasColumnType("text");

                            b1.Property<string>("BusinessOwner")
                                .HasColumnType("text");

                            b1.Property<string>("CompanyNumber")
                                .HasColumnType("text");

                            b1.Property<string>("CompanyType")
                                .HasColumnType("text");

                            b1.Property<bool>("IdChecked")
                                .HasColumnType("boolean");

                            b1.Property<string>("RegisteredIn")
                                .HasColumnType("text");

                            b1.Property<int>("SortCode")
                                .HasColumnType("integer");

                            b1.Property<string>("VatNumber")
                                .HasColumnType("text");

                            b1.Property<bool>("VatRegistered")
                                .HasColumnType("boolean");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("CompanyAddress");

                    b.Navigation("CompanyContacts");

                    b.Navigation("CompanyDetails");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.CompanyContent", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("CompanyContents")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.CompanyDescription", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("CompanyDescriptions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Insurance", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("Insurances")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.InvoiceAggregate.Invoice", b =>
                {
                    b.HasOne("Domain.Membership", null)
                        .WithMany("Invoices")
                        .HasForeignKey("MembershipId");

                    b.HasOne("Domain.OrderAggregate.Order", null)
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("Domain.InvoiceAggregate.InvoiceItem", b =>
                {
                    b.HasOne("Domain.InvoiceAggregate.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Listing", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("Listings")
                        .HasForeignKey("CompanyReference")
                        .HasPrincipalKey("CompanyReference");

                    b.OwnsOne("Domain.ListingAggregate.Objects.EpcRatings", "EpcRatings", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid");

                            b1.Property<int>("EerCurrentRating")
                                .HasColumnType("integer");

                            b1.Property<int>("EerPotentialRating")
                                .HasColumnType("integer");

                            b1.Property<int>("EirCurrentRating")
                                .HasColumnType("integer");

                            b1.Property<int>("EirPotentialRating")
                                .HasColumnType("integer");

                            b1.HasKey("ListingId");

                            b1.ToTable("Listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId");
                        });

                    b.OwnsOne("Domain.ListingAggregate.Objects.LeaseExpiry", "LeaseExpiry", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ExpiryDate")
                                .HasColumnType("text");

                            b1.Property<int>("YearsRemaining")
                                .HasColumnType("integer");

                            b1.HasKey("ListingId");

                            b1.ToTable("Listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId");
                        });

                    b.OwnsOne("Domain.ListingAggregate.Objects.ListingLocation", "ListingLocation", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Country")
                                .HasColumnType("integer");

                            b1.Property<string>("County")
                                .HasColumnType("text");

                            b1.Property<string>("Locality")
                                .HasColumnType("text");

                            b1.Property<string>("PafUdprn")
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PropertyNumberOrName")
                                .HasColumnType("text");

                            b1.Property<string>("StreetName")
                                .HasColumnType("text");

                            b1.Property<string>("TownOrCity")
                                .HasColumnType("text");

                            b1.Property<string>("What3words")
                                .HasColumnType("text");

                            b1.HasKey("ListingId");

                            b1.ToTable("Listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId");

                            b1.OwnsOne("Domain.LocationAggregate.Coordinates", "Coordinates", b2 =>
                                {
                                    b2.Property<Guid>("ListingLocationListingId")
                                        .HasColumnType("uuid");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("double precision");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("double precision");

                                    b2.HasKey("ListingLocationListingId");

                                    b2.ToTable("Listings");

                                    b2.WithOwner()
                                        .HasForeignKey("ListingLocationListingId");
                                });

                            b1.Navigation("Coordinates");
                        });

                    b.OwnsOne("Domain.ListingAggregate.Objects.MinimumContractLength", "MinimumContractLength", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid");

                            b1.Property<int>("MinimumLength")
                                .HasColumnType("integer");

                            b1.Property<int>("Units")
                                .HasColumnType("integer");

                            b1.HasKey("ListingId");

                            b1.ToTable("Listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId");
                        });

                    b.OwnsOne("Domain.ListingAggregate.Objects.Pricing", "Pricing", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("Auction")
                                .HasColumnType("boolean");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.Property<double>("Price")
                                .HasColumnType("double precision");

                            b1.Property<int>("PriceQualifier")
                                .HasColumnType("integer");

                            b1.Property<int>("RentFrequency")
                                .HasColumnType("integer");

                            b1.Property<int>("TransactionType")
                                .HasColumnType("integer");

                            b1.HasKey("ListingId");

                            b1.ToTable("Listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId");

                            b1.OwnsOne("Domain.ListingAggregate.Objects.PricePerUnitArea", "PricePerUnitArea", b2 =>
                                {
                                    b2.Property<Guid>("PricingListingId")
                                        .HasColumnType("uuid");

                                    b2.Property<double>("Price")
                                        .HasColumnType("double precision");

                                    b2.Property<int>("Units")
                                        .HasColumnType("integer");

                                    b2.HasKey("PricingListingId");

                                    b2.ToTable("Listings");

                                    b2.WithOwner()
                                        .HasForeignKey("PricingListingId");
                                });

                            b1.Navigation("PricePerUnitArea");
                        });

                    b.OwnsOne("Domain.ListingAggregate.Objects.ServiceCharge", "ServiceCharge", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Charge")
                                .HasColumnType("double precision");

                            b1.Property<int>("Frequency")
                                .HasColumnType("integer");

                            b1.Property<int>("PerUnitAreaUnits")
                                .HasColumnType("integer");

                            b1.HasKey("ListingId");

                            b1.ToTable("Listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId");
                        });

                    b.OwnsOne("Domain.ListingAggregate.Objects.TenantEligibility", "TenantEligibility", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Dss")
                                .HasColumnType("integer");

                            b1.Property<int>("Students")
                                .HasColumnType("integer");

                            b1.HasKey("ListingId");

                            b1.ToTable("Listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId");
                        });

                    b.Navigation("Company");

                    b.Navigation("EpcRatings");

                    b.Navigation("LeaseExpiry");

                    b.Navigation("ListingLocation");

                    b.Navigation("MinimumContractLength");

                    b.Navigation("Pricing");

                    b.Navigation("ServiceCharge");

                    b.Navigation("TenantEligibility");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.Areas", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithOne("Areas")
                        .HasForeignKey("Domain.ListingAggregate.Objects.Areas", "ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ListingAggregate.Objects.Area", "External", b1 =>
                        {
                            b1.Property<Guid>("AreasId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Units")
                                .HasColumnType("integer");

                            b1.Property<double>("Value")
                                .HasColumnType("double precision");

                            b1.HasKey("AreasId");

                            b1.ToTable("Areas");

                            b1.WithOwner()
                                .HasForeignKey("AreasId");
                        });

                    b.OwnsOne("Domain.ListingAggregate.Objects.Area", "Internal", b1 =>
                        {
                            b1.Property<Guid>("AreasId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Units")
                                .HasColumnType("integer");

                            b1.Property<double>("Value")
                                .HasColumnType("double precision");

                            b1.HasKey("AreasId");

                            b1.ToTable("Areas");

                            b1.WithOwner()
                                .HasForeignKey("AreasId");
                        });

                    b.Navigation("External");

                    b.Navigation("Internal");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.Content", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithMany("Contents")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.DetailedDescription", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithMany("DetailedDescriptions")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ListingAggregate.Objects.Dimensions", "Dimensions", b1 =>
                        {
                            b1.Property<Guid>("DetailedDescriptionId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Length")
                                .HasColumnType("double precision");

                            b1.Property<int>("Unit")
                                .HasColumnType("integer");

                            b1.Property<double>("Width")
                                .HasColumnType("double precision");

                            b1.HasKey("DetailedDescriptionId");

                            b1.ToTable("DetailedDescriptions");

                            b1.WithOwner()
                                .HasForeignKey("DetailedDescriptionId");
                        });

                    b.Navigation("Dimensions");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.MembershipAggregate.Subscription", b =>
                {
                    b.HasOne("Domain.Membership", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("MembershipId");
                });

            modelBuilder.Entity("Domain.OrderAggregate.AcceptanceForm", b =>
                {
                    b.HasOne("Domain.OrderAggregate.Order", "Order")
                        .WithOne("AcceptanceForm")
                        .HasForeignKey("Domain.OrderAggregate.AcceptanceForm", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.OrderAggregate.Order", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("Orders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.OrderAggregate.OrderAddress", b =>
                {
                    b.HasOne("Domain.OrderAggregate.Order", "Order")
                        .WithMany("OrderAddresses")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.LocationAggregate.Coordinates", "Coordinates", b1 =>
                        {
                            b1.Property<Guid>("OrderAddressId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.HasKey("OrderAddressId");

                            b1.ToTable("OrdersAddresses");

                            b1.WithOwner()
                                .HasForeignKey("OrderAddressId");
                        });

                    b.Navigation("Coordinates");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Company", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("CompanyContents");

                    b.Navigation("CompanyDescriptions");

                    b.Navigation("Insurances");

                    b.Navigation("Listings");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.InvoiceAggregate.Invoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Listing", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Contents");

                    b.Navigation("DetailedDescriptions");
                });

            modelBuilder.Entity("Domain.Membership", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Domain.OrderAggregate.Order", b =>
                {
                    b.Navigation("AcceptanceForm");

                    b.Navigation("Invoices");

                    b.Navigation("OrderAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
