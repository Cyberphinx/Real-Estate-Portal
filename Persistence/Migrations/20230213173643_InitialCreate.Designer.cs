// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230213173643_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "property_type", new[] { "barn_conversion", "block_of_flats", "bungalow", "business_park", "chalet", "chateau", "cottage", "country_house", "detached", "detached_bungalow", "end_terrace", "equestrian", "farm", "farmhouse", "finca", "flat", "hotel", "houseboat", "industrial", "land", "leisure", "light_industrial", "link_detached", "lodge", "longere", "maisonette", "mews", "office", "park_home", "parking", "pub_bar", "restaurant", "retail", "riad", "semi_detached", "semi_detached_bungalow", "studio", "terraced", "terraced_bungalow", "town_house", "villa", "warehouse" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.AppUserAggregate.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.AppUserMedia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLogo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppUserMedia");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.AppUserReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewerDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ReviewerEmail")
                        .HasColumnType("text");

                    b.Property<string>("ReviewerPhone")
                        .HasColumnType("text");

                    b.Property<string>("ReviewerUsername")
                        .HasColumnType("text");

                    b.Property<List<string>>("ServiceCategories")
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppUserReview");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("MemberSince")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Membership");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CompanyReference")
                        .HasColumnType("text");

                    b.Property<string>("CompanyRegistrationNumber")
                        .HasColumnType("text");

                    b.Property<int>("CompanyType")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("IcoRegistrationNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LegalName")
                        .HasColumnType("text");

                    b.Property<string>("RedressScheme")
                        .HasColumnType("text");

                    b.Property<List<string>>("ServiceCategories")
                        .HasColumnType("text[]");

                    b.Property<string>("ServiceLocations")
                        .HasColumnType("text");

                    b.Property<string>("SummaryDescription")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<string>("DisplayAddress")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Locality")
                        .HasColumnType("text");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("PropertyNumberOrName")
                        .HasColumnType("text");

                    b.Property<string>("StreetName")
                        .HasColumnType("text");

                    b.Property<string>("TownOrCity")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyAddress");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyContacts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyContacts");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Heading")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyDescription");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyMedia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLogo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyMedia");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewerDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ReviewerEmail")
                        .HasColumnType("text");

                    b.Property<string>("ReviewerPhone")
                        .HasColumnType("text");

                    b.Property<string>("ReviewerUsername")
                        .HasColumnType("text");

                    b.Property<List<string>>("ServiceCategories")
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyReview");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.Insurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientMoneyProtection")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IndemnityLimit")
                        .HasColumnType("text");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Insurance");
                });

            modelBuilder.Entity("Domain.EmployeeAggregate.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<string>("Landline")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Domain.EmployeeAggregate.EmployeePhoto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLogo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeePhoto");
                });

            modelBuilder.Entity("Domain.InvoiceAggregate.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("integer");

                    b.Property<string>("JobReference")
                        .HasColumnType("text");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("text");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<long>("VatPercentage")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Domain.InvoiceAggregate.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("VatPercentage")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItem");
                });

            modelBuilder.Entity("Domain.JobAggregate.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("integer");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("text");

                    b.Property<string>("DeclaredlValue")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("FinishBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("JobLifeCycle")
                        .HasColumnType("integer");

                    b.Property<string>("JobReference")
                        .HasColumnType("text");

                    b.Property<bool>("PackingRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("PropertyType")
                        .HasColumnType("text");

                    b.Property<List<string>>("ServiceCategories")
                        .HasColumnType("text[]");

                    b.Property<bool>("StorageRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("StorageValue")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressType")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<string>("DisplayAddress")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Locality")
                        .HasColumnType("text");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("PropertyNumberOrName")
                        .HasColumnType("text");

                    b.Property<string>("StreetName")
                        .HasColumnType("text");

                    b.Property<string>("TownOrCity")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobLocation");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobMedia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLogo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobMedia");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("JobId");

                    b.ToTable("JobMessages");
                });

            modelBuilder.Entity("Domain.JobNetwork", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("AppUserId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("JobNetworks");
                });

            modelBuilder.Entity("Domain.KeyPerson", b =>
                {
                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.HasKey("ListingId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("KeyPersons");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("Accessibility")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AdministrationFees")
                        .HasColumnType("text");

                    b.Property<double>("AnnualBusinessRates")
                        .HasColumnType("double precision");

                    b.Property<double>("AreaTotal")
                        .HasColumnType("double precision");

                    b.Property<int>("AreaUnits")
                        .HasColumnType("integer");

                    b.Property<int>("AvailableBedrooms")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AvailableFromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("integer");

                    b.Property<int[]>("BillsIncluded")
                        .HasColumnType("integer[]");

                    b.Property<bool>("BusinessForSale")
                        .HasColumnType("boolean");

                    b.Property<int[]>("BuyerIncentives")
                        .HasColumnType("integer[]");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("CentralHeating")
                        .HasColumnType("integer");

                    b.Property<bool>("ChainFree")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("CommercialUseClass")
                        .HasColumnType("text[]");

                    b.Property<string>("CommonholdDetails")
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<int[]>("ConnectedUtilities")
                        .HasColumnType("integer[]");

                    b.Property<int>("ConstructionYear")
                        .HasColumnType("integer");

                    b.Property<int>("CookerType")
                        .HasColumnType("integer");

                    b.Property<int>("CouncilTaxBand")
                        .HasColumnType("integer");

                    b.Property<int>("DecorativeCondition")
                        .HasColumnType("integer");

                    b.Property<double>("Deposit")
                        .HasColumnType("double precision");

                    b.Property<string>("EerCurrentRating")
                        .HasColumnType("text");

                    b.Property<string>("EerPotentialRating")
                        .HasColumnType("text");

                    b.Property<string>("EirCurrentRating")
                        .HasColumnType("text");

                    b.Property<string>("EirPotentialRating")
                        .HasColumnType("text");

                    b.Property<List<string>>("FeatureList")
                        .HasColumnType("text[]");

                    b.Property<bool>("FeatureProperty")
                        .HasColumnType("boolean");

                    b.Property<int[]>("FeatureSpaces")
                        .HasColumnType("integer[]");

                    b.Property<List<string>>("FloorLevels")
                        .HasColumnType("text[]");

                    b.Property<int>("Floors")
                        .HasColumnType("integer");

                    b.Property<int>("FurnishedState")
                        .HasColumnType("integer");

                    b.Property<double>("GroundRent")
                        .HasColumnType("double precision");

                    b.Property<string>("GroundRentReviewPeriod")
                        .HasColumnType("text");

                    b.Property<string>("LeaseExpiry")
                        .HasColumnType("text");

                    b.Property<int>("LifeCycleStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("ListedBuilding")
                        .HasColumnType("boolean");

                    b.Property<int>("ListedBuildingGrade")
                        .HasColumnType("integer");

                    b.Property<string>("ListingReference")
                        .HasColumnType("text");

                    b.Property<int>("LivingRooms")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumContractLength")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumContractLengthUnits")
                        .HasColumnType("integer");

                    b.Property<bool>("NewBuild")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OpenDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int[]>("Parking")
                        .HasColumnType("integer[]");

                    b.Property<bool>("PetsAllowed")
                        .HasColumnType("boolean");

                    b.Property<int>("PropertyType")
                        .HasColumnType("integer");

                    b.Property<int>("RateableValue")
                        .HasColumnType("integer");

                    b.Property<int>("RatesPayable")
                        .HasColumnType("integer");

                    b.Property<int>("RentalTerm")
                        .HasColumnType("integer");

                    b.Property<bool>("Repossession")
                        .HasColumnType("boolean");

                    b.Property<bool>("Retirement")
                        .HasColumnType("boolean");

                    b.Property<string>("SapRating")
                        .HasColumnType("text");

                    b.Property<bool>("Serviced")
                        .HasColumnType("boolean");

                    b.Property<bool>("SharedAccommodation")
                        .HasColumnType("boolean");

                    b.Property<string>("SharedOwnershipDetails")
                        .HasColumnType("text");

                    b.Property<bool>("SmokersConsidered")
                        .HasColumnType("boolean");

                    b.Property<string>("SummaryDescription")
                        .HasColumnType("text");

                    b.Property<int>("TenantEligibilityDss")
                        .HasColumnType("integer");

                    b.Property<int>("TenantEligibilityStudents")
                        .HasColumnType("integer");

                    b.Property<bool>("Tenanted")
                        .HasColumnType("boolean");

                    b.Property<int>("Tenure")
                        .HasColumnType("integer");

                    b.Property<int>("TotalBedrooms")
                        .HasColumnType("integer");

                    b.Property<int[]>("UniqueFeatures")
                        .HasColumnType("integer[]");

                    b.Property<int[]>("WhiteGoods")
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.DetailedDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Heading")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<double>("Length")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int>("Unit")
                        .HasColumnType("integer");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("DetailedDescription");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.ListingLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<string>("DisplayAddress")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Locality")
                        .HasColumnType("text");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("PropertyNumberOrName")
                        .HasColumnType("text");

                    b.Property<string>("StreetName")
                        .HasColumnType("text");

                    b.Property<string>("TownOrCity")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListingId")
                        .IsUnique();

                    b.ToTable("ListingLocation");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.ListingMedia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLogo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("ListingMedia");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.Pricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AreaUnits")
                        .HasColumnType("integer");

                    b.Property<bool>("Auction")
                        .HasColumnType("boolean");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<double>("PricePerUnitArea")
                        .HasColumnType("double precision");

                    b.Property<int>("PriceQualifier")
                        .HasColumnType("integer");

                    b.Property<int>("RentFrequency")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ListingId")
                        .IsUnique();

                    b.ToTable("Pricing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.ServiceCharge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Applicable")
                        .HasColumnType("boolean");

                    b.Property<double>("Charge")
                        .HasColumnType("double precision");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<int>("PerUnitAreaUnits")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewPeriod")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListingId")
                        .IsUnique();

                    b.ToTable("ServiceCharge");
                });

            modelBuilder.Entity("Domain.ListingWatcher", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AppUserId", "ListingId");

                    b.HasIndex("ListingId");

                    b.ToTable("ListingWatchers");
                });

            modelBuilder.Entity("Domain.TrackingAggregate.Tracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("App")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("Component")
                        .HasColumnType("text");

                    b.Property<string>("Count")
                        .HasColumnType("text");

                    b.Property<string>("Event")
                        .HasColumnType("text");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("ListingId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TrackingData");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "31af9df7-0d75-482e-82a7-50c04df8e156",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "319e516f-84c3-4df4-988a-7505dbad223b",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "719b48cc-a322-4e2a-9f84-94d465629f11",
                            Name = "Agency",
                            NormalizedName = "AGENCY"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "49d6681b-e1a3-45e4-b804-1341db17252a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "a86e34cd-03f2-432a-8c38-4a177ff12444",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "6",
                            ConcurrencyStamp = "d85b46ad-1842-45fa-bd64-0a6d01149211",
                            Name = "Removalist",
                            NormalizedName = "REMOVALIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.AppUserMedia", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithMany("Photos")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.AppUserReview", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithMany("Reviews")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.Membership", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithOne("Membership")
                        .HasForeignKey("Domain.AppUserAggregate.Objects.Membership", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.AppUserAggregate.Objects.RefreshToken", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyAddress", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithOne("CompanyAddress")
                        .HasForeignKey("Domain.CompanyAggregate.Objects.CompanyAddress", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyContacts", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithOne("CompanyContacts")
                        .HasForeignKey("Domain.CompanyAggregate.Objects.CompanyContacts", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyDescription", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("CompanyDescriptions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyMedia", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("CompanyMedia")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.CompanyReview", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("Reviews")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Objects.Insurance", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("Insurances")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.EmployeeAggregate.EmployeePhoto", b =>
                {
                    b.HasOne("Domain.EmployeeAggregate.Employee", "Employee")
                        .WithOne("Photo")
                        .HasForeignKey("Domain.EmployeeAggregate.EmployeePhoto", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.InvoiceAggregate.InvoiceItem", b =>
                {
                    b.HasOne("Domain.InvoiceAggregate.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobLocation", b =>
                {
                    b.HasOne("Domain.JobAggregate.Job", "Job")
                        .WithMany("JobLocations")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobMedia", b =>
                {
                    b.HasOne("Domain.JobAggregate.Job", "Job")
                        .WithMany("JobMedia")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.JobAggregate.Objects.JobMessage", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.JobAggregate.Job", "Job")
                        .WithMany("Messages")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Author");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.JobNetwork", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithMany("Jobs")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.JobAggregate.Job", "Job")
                        .WithMany("Networks")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.KeyPerson", b =>
                {
                    b.HasOne("Domain.EmployeeAggregate.Employee", "Employee")
                        .WithMany("Portfolio")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithMany("KeyContacts")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Listing", b =>
                {
                    b.HasOne("Domain.CompanyAggregate.Company", "Company")
                        .WithMany("Listings")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.DetailedDescription", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithMany("DetailedDescriptions")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.ListingLocation", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithOne("ListingLocation")
                        .HasForeignKey("Domain.ListingAggregate.Objects.ListingLocation", "ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.ListingMedia", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithMany("ListingMedia")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.Pricing", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithOne("Pricing")
                        .HasForeignKey("Domain.ListingAggregate.Objects.Pricing", "ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Objects.ServiceCharge", b =>
                {
                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithOne("ServiceCharge")
                        .HasForeignKey("Domain.ListingAggregate.Objects.ServiceCharge", "ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Domain.ListingWatcher", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", "AppUser")
                        .WithMany("SavedListings")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ListingAggregate.Listing", "Listing")
                        .WithMany("Watchers")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AppUserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.AppUserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AppUserAggregate.AppUser", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Membership");

                    b.Navigation("Photos");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Reviews");

                    b.Navigation("SavedListings");
                });

            modelBuilder.Entity("Domain.CompanyAggregate.Company", b =>
                {
                    b.Navigation("CompanyAddress");

                    b.Navigation("CompanyContacts");

                    b.Navigation("CompanyDescriptions");

                    b.Navigation("CompanyMedia");

                    b.Navigation("Insurances");

                    b.Navigation("Listings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.EmployeeAggregate.Employee", b =>
                {
                    b.Navigation("Photo");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Domain.InvoiceAggregate.Invoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.JobAggregate.Job", b =>
                {
                    b.Navigation("JobLocations");

                    b.Navigation("JobMedia");

                    b.Navigation("Messages");

                    b.Navigation("Networks");
                });

            modelBuilder.Entity("Domain.ListingAggregate.Listing", b =>
                {
                    b.Navigation("DetailedDescriptions");

                    b.Navigation("KeyContacts");

                    b.Navigation("ListingLocation");

                    b.Navigation("ListingMedia");

                    b.Navigation("Pricing");

                    b.Navigation("ServiceCharge");

                    b.Navigation("Watchers");
                });
#pragma warning restore 612, 618
        }
    }
}
